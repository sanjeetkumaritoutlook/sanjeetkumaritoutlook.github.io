/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AboutUs {
    }
    interface AppHomePage {
    }
    interface AppProfilePage {
        /**
          * Alternate text for the image
         */
        "alt": string;
        /**
          * Image height (e.g., "100px" or "auto")
         */
        "height": string;
        "name": string;
        /**
          * Image width (e.g., "200px" or "100%")
         */
        "width": string;
    }
    interface AppRootPortfolio {
    }
    interface FeedbackForm {
        "disableQuickbars": boolean;
        "disabled": boolean;
        "fontFamily": string;
        "fontSize": string;
        "initialValue": string;
        /**
          * Optional placeholder text displayed when the form field is empty.
         */
        "placeholder": string;
    }
    interface HeaderNavigation {
    }
    interface PostsDashboard {
    }
    interface WebComponents {
    }
}
export interface FeedbackFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFeedbackFormElement;
}
declare global {
    interface HTMLAboutUsElement extends Components.AboutUs, HTMLStencilElement {
    }
    var HTMLAboutUsElement: {
        prototype: HTMLAboutUsElement;
        new (): HTMLAboutUsElement;
    };
    interface HTMLAppHomePageElement extends Components.AppHomePage, HTMLStencilElement {
    }
    var HTMLAppHomePageElement: {
        prototype: HTMLAppHomePageElement;
        new (): HTMLAppHomePageElement;
    };
    interface HTMLAppProfilePageElement extends Components.AppProfilePage, HTMLStencilElement {
    }
    var HTMLAppProfilePageElement: {
        prototype: HTMLAppProfilePageElement;
        new (): HTMLAppProfilePageElement;
    };
    interface HTMLAppRootPortfolioElement extends Components.AppRootPortfolio, HTMLStencilElement {
    }
    var HTMLAppRootPortfolioElement: {
        prototype: HTMLAppRootPortfolioElement;
        new (): HTMLAppRootPortfolioElement;
    };
    interface HTMLFeedbackFormElementEventMap {
        "valueChange": string;
        "editorFocus": void;
        "editorBlur": void;
        "contentChanged": any;
    }
    interface HTMLFeedbackFormElement extends Components.FeedbackForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFeedbackFormElementEventMap>(type: K, listener: (this: HTMLFeedbackFormElement, ev: FeedbackFormCustomEvent<HTMLFeedbackFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFeedbackFormElementEventMap>(type: K, listener: (this: HTMLFeedbackFormElement, ev: FeedbackFormCustomEvent<HTMLFeedbackFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFeedbackFormElement: {
        prototype: HTMLFeedbackFormElement;
        new (): HTMLFeedbackFormElement;
    };
    interface HTMLHeaderNavigationElement extends Components.HeaderNavigation, HTMLStencilElement {
    }
    var HTMLHeaderNavigationElement: {
        prototype: HTMLHeaderNavigationElement;
        new (): HTMLHeaderNavigationElement;
    };
    interface HTMLPostsDashboardElement extends Components.PostsDashboard, HTMLStencilElement {
    }
    var HTMLPostsDashboardElement: {
        prototype: HTMLPostsDashboardElement;
        new (): HTMLPostsDashboardElement;
    };
    interface HTMLWebComponentsElement extends Components.WebComponents, HTMLStencilElement {
    }
    var HTMLWebComponentsElement: {
        prototype: HTMLWebComponentsElement;
        new (): HTMLWebComponentsElement;
    };
    interface HTMLElementTagNameMap {
        "about-us": HTMLAboutUsElement;
        "app-home-page": HTMLAppHomePageElement;
        "app-profile-page": HTMLAppProfilePageElement;
        "app-root-portfolio": HTMLAppRootPortfolioElement;
        "feedback-form": HTMLFeedbackFormElement;
        "header-navigation": HTMLHeaderNavigationElement;
        "posts-dashboard": HTMLPostsDashboardElement;
        "web-components": HTMLWebComponentsElement;
    }
}
declare namespace LocalJSX {
    interface AboutUs {
    }
    interface AppHomePage {
    }
    interface AppProfilePage {
        /**
          * Alternate text for the image
         */
        "alt"?: string;
        /**
          * Image height (e.g., "100px" or "auto")
         */
        "height"?: string;
        "name"?: string;
        /**
          * Image width (e.g., "200px" or "100%")
         */
        "width"?: string;
    }
    interface AppRootPortfolio {
    }
    interface FeedbackForm {
        "disableQuickbars"?: boolean;
        "disabled"?: boolean;
        "fontFamily"?: string;
        "fontSize"?: string;
        "initialValue"?: string;
        "onContentChanged"?: (event: FeedbackFormCustomEvent<any>) => void;
        "onEditorBlur"?: (event: FeedbackFormCustomEvent<void>) => void;
        "onEditorFocus"?: (event: FeedbackFormCustomEvent<void>) => void;
        "onValueChange"?: (event: FeedbackFormCustomEvent<string>) => void;
        /**
          * Optional placeholder text displayed when the form field is empty.
         */
        "placeholder"?: string;
    }
    interface HeaderNavigation {
    }
    interface PostsDashboard {
    }
    interface WebComponents {
    }
    interface IntrinsicElements {
        "about-us": AboutUs;
        "app-home-page": AppHomePage;
        "app-profile-page": AppProfilePage;
        "app-root-portfolio": AppRootPortfolio;
        "feedback-form": FeedbackForm;
        "header-navigation": HeaderNavigation;
        "posts-dashboard": PostsDashboard;
        "web-components": WebComponents;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-us": LocalJSX.AboutUs & JSXBase.HTMLAttributes<HTMLAboutUsElement>;
            "app-home-page": LocalJSX.AppHomePage & JSXBase.HTMLAttributes<HTMLAppHomePageElement>;
            "app-profile-page": LocalJSX.AppProfilePage & JSXBase.HTMLAttributes<HTMLAppProfilePageElement>;
            "app-root-portfolio": LocalJSX.AppRootPortfolio & JSXBase.HTMLAttributes<HTMLAppRootPortfolioElement>;
            "feedback-form": LocalJSX.FeedbackForm & JSXBase.HTMLAttributes<HTMLFeedbackFormElement>;
            "header-navigation": LocalJSX.HeaderNavigation & JSXBase.HTMLAttributes<HTMLHeaderNavigationElement>;
            "posts-dashboard": LocalJSX.PostsDashboard & JSXBase.HTMLAttributes<HTMLPostsDashboardElement>;
            "web-components": LocalJSX.WebComponents & JSXBase.HTMLAttributes<HTMLWebComponentsElement>;
        }
    }
}
